{
  "version": 3,
  "sources": ["../src/addSchedule.tsx", "../src/fetchStoredSchedule.tsx", "../src/listActionPanel.tsx", "../src/utils.ts", "../src/extractSchedule.ts", "../src/status.ts"],
  "sourcesContent": ["import { useState } from \"react\";\nimport {\n  LocalStorage,\n  Color,\n  showToast,\n  Toast,\n  Action,\n  ActionPanel,\n  Icon,\n  List,\n  Alert,\n  confirmAlert,\n} from \"@raycast/api\";\nimport { useLoadStoredSchedules } from \"./fetchStoredSchedule\";\nimport { ListActionPanel } from \"./listActionPanel\";\nimport {\n  Schedule,\n  changeScheduleState,\n  stopCaffeinate,\n  isTodaysSchedule,\n  isNotTodaysSchedule,\n  numberToDayString,\n} from \"./utils\";\nimport { extractSchedule } from \"./extractSchedule\";\nimport { checkSchedule } from \"./status\";\n\nexport default function Command() {\n  const [searchText, setSearchText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  useLoadStoredSchedules(setSchedules, setIsLoading);\n\n  const handleSetSchedule = async () => {\n    try {\n      const parsedSchedule = await extractSchedule(searchText);\n\n      if (!parsedSchedule) {\n        return;\n      }\n      const { days, from, to } = parsedSchedule;\n      const newSchedules = days.map((day) => ({ day, from, to, IsManuallyDecafed: false, IsRunning: false }));\n\n      for (const schedule of newSchedules) {\n        await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      }\n\n      const currentDate = new Date();\n      const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n      const isScheduleRunning = await checkSchedule();\n\n      const updatedSchedules = newSchedules.map((schedule) => {\n        if (currentDayString === schedule.day) {\n          return { ...schedule, IsRunning: isScheduleRunning };\n        }\n        return schedule;\n      });\n\n      setSchedules((prevSchedules) => [\n        ...prevSchedules.filter((schedule) => !days.includes(schedule.day)),\n        ...updatedSchedules,\n      ]);\n\n      await showToast(Toast.Style.Success, \"Caffeination schedule set successfully.\");\n      setSearchText(\"\");\n    } catch (error) {\n      console.error(\"Failed to set schedule:\", error);\n      await showToast(Toast.Style.Failure, \"Failed to set schedule.\");\n    }\n  };\n\n  const handleDeleteSchedule = async (schedule: Schedule) => {\n    const deleteConfirmation = await confirmAlert({\n      title: \"Delete schedule\",\n      message: \"Are you sure you wish to delete this schedule?\",\n      primaryAction: {\n        title: \"Yes\",\n        style: Alert.ActionStyle.Destructive,\n      },\n      dismissAction: {\n        title: \"No\",\n        style: Alert.ActionStyle.Cancel,\n      },\n      icon: {\n        source: Icon.Trash,\n        tintColor: Color.Red,\n      },\n    });\n\n    if (deleteConfirmation) {\n      try {\n        if (schedule.IsRunning === true) await stopCaffeinate({ menubar: true, status: true });\n        await LocalStorage.removeItem(schedule.day);\n        await showToast(Toast.Style.Success, \"Schedule deleted.\");\n\n        const updatedSchedules = schedules.filter((scheduleItem) => scheduleItem.day !== schedule.day);\n        setSchedules(updatedSchedules);\n      } catch (error) {\n        console.error(\"Failed to delete schedule:\", error);\n        await showToast(Toast.Style.Failure, \"Failed to delete schedule.\");\n      }\n    }\n  };\n\n  const handlePauseSchedule = async (schedule: Schedule) => {\n    changeScheduleState(\"decaffeinate\", schedule);\n    await showToast(\n      Toast.Style.Success,\n      `Schedule for ${schedule.day.charAt(0).toUpperCase() + schedule.day.slice(1).toLowerCase()} is now paused`,\n    );\n\n    if (isTodaysSchedule(schedule)) {\n      await stopCaffeinate({ menubar: true, status: true });\n    }\n\n    // Update the state to reflect the paused schedule\n    setSchedules((prevSchedules) =>\n      prevSchedules.map((s) => (s.day === schedule.day ? { ...s, IsRunning: false, IsManuallyDecafed: true } : s)),\n    );\n  };\n\n  const handleResumeSchedule = async (schedule: Schedule) => {\n    changeScheduleState(\"caffeinate\", schedule);\n    await showToast(\n      Toast.Style.Success,\n      `Schedule for ${schedule.day.charAt(0).toUpperCase() + schedule.day.slice(1).toLowerCase()} is now resumed`,\n    );\n\n    const isScheduled = await checkSchedule();\n\n    // Update the state to reflect the resumed schedule\n    setSchedules((prevSchedules) =>\n      prevSchedules.map((s) =>\n        s.day === schedule.day ? { ...s, IsRunning: isScheduled, IsManuallyDecafed: false } : s,\n      ),\n    );\n  };\n\n  return (\n    <List\n      searchText={searchText}\n      isLoading={isLoading}\n      searchBarPlaceholder=\"Schedule for Monday and Tuesday from 12:00 to 14:00\"\n      onSearchTextChange={setSearchText}\n      filtering={false}\n      actions={\n        <ActionPanel>\n          <Action autoFocus title=\"Set Schedule\" icon={Icon.Calendar} onAction={handleSetSchedule} />\n        </ActionPanel>\n      }\n    >\n      {schedules.length === 0 ? (\n        <List.EmptyView\n          title=\"No caffeination schedules yet\"\n          description=\"To schedule, enter the days to be scheduled and time range, then hit enter!\"\n          icon={Icon.Calendar}\n        />\n      ) : (\n        <>\n          {[\"Today's Schedule\", \"Caffeination Schedule\"].map((sectionTitle, index) => (\n            <List.Section\n              key={index}\n              title={sectionTitle}\n              children={schedules.filter(index === 0 ? isTodaysSchedule : isNotTodaysSchedule).map((schedule, idx) => (\n                <List.Item\n                  key={idx}\n                  title={schedule.day.charAt(0).toUpperCase() + schedule.day.slice(1)}\n                  accessories={[\n                    {\n                      text:\n                        index === 0\n                          ? schedule.IsRunning\n                            ? \"Running\"\n                            : schedule.IsManuallyDecafed\n                              ? \"Paused\"\n                              : \"Scheduled\"\n                          : schedule.IsManuallyDecafed\n                            ? \"Scheduled Paused\"\n                            : \"Scheduled\",\n                      icon:\n                        index === 0\n                          ? schedule.IsRunning\n                            ? Icon.Play\n                            : schedule.IsManuallyDecafed\n                              ? Icon.Pause\n                              : Icon.Calendar\n                          : Icon.Calendar,\n                    },\n                  ]}\n                  subtitle={`Set from ${schedule.from} to ${schedule.to}`}\n                  icon={Icon.Calendar}\n                  actions={\n                    <ListActionPanel\n                      searchText={searchText}\n                      schedule={schedule}\n                      onSetScheduleAction={handleSetSchedule}\n                      onDeleteScheduleAction={handleDeleteSchedule}\n                      onPauseScheduleAction={() => handlePauseSchedule(schedule)}\n                      onResumeScheduleAction={() => handleResumeSchedule(schedule)}\n                    />\n                  }\n                />\n              ))}\n            />\n          ))}\n        </>\n      )}\n    </List>\n  );\n}\n", "import { LocalStorage } from \"@raycast/api\";\nimport { Schedule } from \"./utils\";\nimport { useEffect } from \"react\";\n\nconst dayOrder: { [key: string]: number } = {\n  sunday: 0,\n  monday: 1,\n  tuesday: 2,\n  wednesday: 3,\n  thursday: 4,\n  friday: 5,\n  saturday: 6,\n};\n\nexport function useLoadStoredSchedules(\n  updateSchedules: (schedules: Schedule[]) => void,\n  setIsLoading: (isLoading: boolean) => void,\n) {\n  useEffect(() => {\n    async function loadSchedulesFromLocalStorage() {\n      setIsLoading(true);\n\n      const allStoredItems = await LocalStorage.allItems();\n      const schedules: Schedule[] = Object.values(allStoredItems).map((item) => JSON.parse(item) as Schedule);\n\n      if (schedules.length > 0) {\n        schedules.sort((a, b) => (dayOrder[a.day] ?? -1) - (dayOrder[b.day] ?? -1));\n\n        updateSchedules(schedules);\n      }\n\n      setIsLoading(false);\n    }\n\n    void loadSchedulesFromLocalStorage();\n  }, [updateSchedules]);\n}\n", "import { Action, ActionPanel, Icon, Keyboard } from \"@raycast/api\";\nimport { Schedule } from \"./utils\";\n\ntype ActionPanelProps = {\n  searchText: string;\n  schedule: Schedule;\n  onSetScheduleAction: () => void;\n  onDeleteScheduleAction: (schedule: Schedule) => void;\n  onPauseScheduleAction: (schedule: Schedule) => void;\n  onResumeScheduleAction: (schedule: Schedule) => void;\n};\n\nexport function ListActionPanel({\n  searchText,\n  schedule,\n  onSetScheduleAction,\n  onDeleteScheduleAction,\n  onPauseScheduleAction,\n  onResumeScheduleAction,\n}: ActionPanelProps) {\n  return (\n    <ActionPanel>\n      {searchText.length > 0 && <Action title=\"Set Schedule\" icon={Icon.Calendar} onAction={onSetScheduleAction} />}\n      <Action\n        title=\"Set Caffeination Schedule\"\n        icon={Icon.CopyClipboard}\n        shortcut={{ modifiers: [\"cmd\"], key: \"s\" }}\n        onAction={() => onSetScheduleAction()}\n      />\n      <Action\n        title=\"Delete Caffeination Schedule\"\n        style={Action.Style.Destructive}\n        icon={Icon.Trash}\n        shortcut={Keyboard.Shortcut.Common.Remove}\n        onAction={() => onDeleteScheduleAction(schedule)}\n      />\n\n      {schedule.IsManuallyDecafed ? (\n        <Action\n          title=\"Resume Caffeination Schedule\"\n          icon={Icon.Play}\n          onAction={() => onResumeScheduleAction(schedule)}\n        />\n      ) : (\n        <Action\n          title=\"Pause Caffeination Schedule\"\n          icon={Icon.Pause}\n          onAction={() => onPauseScheduleAction(schedule)}\n        />\n      )}\n    </ActionPanel>\n  );\n}\n", "import { getPreferenceValues, launchCommand, LaunchType, LocalStorage, showHUD } from \"@raycast/api\";\nimport { exec, execSync } from \"node:child_process\";\n\ntype Preferences = {\n  preventDisplay: boolean;\n  preventDisk: boolean;\n  preventSystem: boolean;\n  icon: string;\n};\n\ntype Updates = {\n  menubar: boolean;\n  status: boolean;\n};\n\nexport interface Schedule {\n  day: string;\n  from: string;\n  to: string;\n  IsManuallyDecafed: boolean;\n  IsRunning: boolean;\n}\n\nexport async function startCaffeinate(updates: Updates, hudMessage?: string, additionalArgs?: string) {\n  if (hudMessage) {\n    await showHUD(hudMessage);\n  }\n  await stopCaffeinate({ menubar: false, status: false });\n  exec(`/usr/bin/caffeinate ${generateArgs(additionalArgs)} || true`);\n  await update(updates, true);\n}\n\nexport async function stopCaffeinate(updates: Updates, hudMessage?: string) {\n  if (hudMessage) {\n    await showHUD(hudMessage);\n  }\n  execSync(\"/usr/bin/killall caffeinate || true\");\n  await update(updates, false);\n}\n\nasync function update(updates: Updates, caffeinated: boolean) {\n  if (updates.menubar) {\n    await tryLaunchCommand(\"index\", { caffeinated });\n  }\n  if (updates.status) {\n    await tryLaunchCommand(\"status\", { caffeinated });\n  }\n}\n\nasync function tryLaunchCommand(commandName: string, context: { caffeinated: boolean }) {\n  try {\n    await launchCommand({ name: commandName, type: LaunchType.Background, context });\n  } catch (error) {\n    // Handle error if command is not enabled\n  }\n}\n\nfunction generateArgs(additionalArgs?: string) {\n  const preferences = getPreferenceValues<Preferences>();\n  const args = [];\n\n  if (preferences.preventDisplay) args.push(\"d\");\n  if (preferences.preventDisk) args.push(\"m\");\n  if (preferences.preventSystem) args.push(\"i\");\n  if (additionalArgs) args.push(` ${additionalArgs}`);\n\n  return args.length > 0 ? `-${args.join(\"\")}` : \"\";\n}\n\nexport function numberToDayString(dayIndex: number): string {\n  const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return daysOfWeek[dayIndex];\n}\n\nexport async function getSchedule() {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  const getSchedule: string | undefined = await LocalStorage.getItem(currentDayString);\n  if (getSchedule === undefined) return undefined;\n\n  const schedule: Schedule = JSON.parse(getSchedule);\n  return schedule;\n}\n\nexport async function changeScheduleState(operation: string, schedule: Schedule) {\n  switch (operation) {\n    case \"caffeinate\": {\n      schedule.IsManuallyDecafed = false;\n      schedule.IsRunning = false;\n      await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      break;\n    }\n    case \"decaffeinate\": {\n      if (schedule.IsRunning === true || isNotTodaysSchedule(schedule)) {\n        schedule.IsManuallyDecafed = true;\n        schedule.IsRunning = false;\n        await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      }\n      break;\n    }\n\n    default:\n      break;\n  }\n}\n\nexport function isTodaysSchedule(schedule: Schedule) {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  if (schedule.day === currentDayString) return true;\n  else return false;\n}\n\nexport function isNotTodaysSchedule(schedule: Schedule) {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  if (schedule.day === currentDayString) return false;\n  else return true;\n}\n\n/*\nExample usage:\nconsole.log(formatDuration(1337000)); // Output: \"15d 11h 23m 20s\"\nconsole.log(formatDuration(3600));    // Output: \"1h\"\nconsole.log(formatDuration(65));      // Output: \"1m 5s\"\nconsole.log(formatDuration(86400));   // Output: \"1d\"\n*/\nexport function formatDuration(seconds: number): string {\n  const units = [\n    { label: \"d\", value: 86400 },\n    { label: \"h\", value: 3600 },\n    { label: \"m\", value: 60 },\n    { label: \"s\", value: 1 },\n  ];\n\n  const result: string[] = [];\n\n  for (const unit of units) {\n    const amount = Math.floor(seconds / unit.value);\n    seconds %= unit.value;\n    if (amount > 0) {\n      result.push(`${amount}${unit.label}`);\n    }\n  }\n\n  return result.join(\" \");\n}\n", "import { showToast, Toast } from \"@raycast/api\";\n\nexport interface ParsedSchedule {\n  days: string[];\n  from: string;\n  to: string;\n}\n\nexport async function extractSchedule(text: string): Promise<ParsedSchedule | null> {\n  const daysOfWeek = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"];\n  const inputText = text.toLowerCase();\n\n  // Extract the time range using a regex\n  const timeRegex = /(\\d{2}:\\d{2})/g;\n  const times = inputText.match(timeRegex);\n\n  // Ensure that both fromTime and toTime are present\n  if (!times || times.length < 2) {\n    await showToast(Toast.Style.Failure, \"Oops! Please specify both 'from' and 'to' times in HH:MM format.\");\n    return null;\n  }\n\n  const [fromTime, toTime] = times;\n\n  // Extract mentioned days\n  const mentionedDays = daysOfWeek.filter((day) => inputText.includes(day));\n\n  // Handle the \"except\" case\n  if (inputText.includes(\"except\")) {\n    if (mentionedDays.length === 0) {\n      await showToast(Toast.Style.Failure, \"Oops! Please mention the days to be excluded.\");\n      return null;\n    }\n    const allDaysExcept = daysOfWeek.filter((day) => !mentionedDays.includes(day));\n    return { days: allDaysExcept, from: fromTime, to: toTime };\n  }\n\n  // If no specific days are mentioned, assume all days\n  const days = mentionedDays.length > 0 ? mentionedDays : daysOfWeek;\n\n  return { days, from: fromTime, to: toTime };\n}\n", "import { LocalStorage, updateCommandMetadata } from \"@raycast/api\";\nimport { Schedule, startCaffeinate, getSchedule, stopCaffeinate } from \"./utils\";\nimport { execSync } from \"node:child_process\";\n\nfunction isCaffeinateRunning(): boolean {\n  try {\n    execSync(\"pgrep caffeinate\");\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function handleScheduledCaffeinate(schedule: Schedule): Promise<boolean> {\n  if (!schedule || Object.keys(schedule).length === 0) {\n    return false;\n  }\n\n  const currentDate = new Date();\n  const [startHour, startMinute] = schedule.from.split(\":\").map(Number);\n  const [endHour, endMinute] = schedule.to.split(\":\").map(Number);\n  const currentHour = currentDate.getHours();\n  const currentMinute = currentDate.getMinutes();\n\n  const isWithinSchedule =\n    (currentHour > startHour || (currentHour === startHour && currentMinute >= startMinute)) &&\n    (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute));\n\n  // Change isRunning to false when the schedule has finished its run\n  if (isWithinSchedule === false && schedule.IsRunning === true) {\n    schedule.IsRunning = false;\n    await stopCaffeinate({ menubar: true, status: true });\n    await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n    return false;\n  }\n\n  // If the current time is within scheduled time, start caffeination\n  if (isWithinSchedule === true && schedule.IsRunning === false) {\n    const duration = (endHour - startHour) * 3600 + (endMinute - startMinute) * 60;\n    await startCaffeinate({ menubar: true, status: true }, undefined, `-t ${duration}`);\n    schedule.IsRunning = true;\n    await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n    return true;\n  }\n\n  return false;\n}\n\n// Function to check and handle schedule\nexport async function checkSchedule() {\n  const schedule = await getSchedule();\n\n  if (schedule === undefined) return false;\n\n  if (!schedule.IsManuallyDecafed) {\n    const isScheduled = await handleScheduledCaffeinate(schedule);\n    return isScheduled;\n  }\n\n  return false;\n}\n\nexport default async function Command() {\n  const isCaffeinated = isCaffeinateRunning();\n  const isScheduled = await checkSchedule();\n\n  let subtitle = \"\u2716 Decaffeinated\";\n\n  if (isCaffeinated) {\n    subtitle = \"\u2714 Caffeinated\";\n  } else if (isScheduled) {\n    subtitle = \"\u2714 Caffeinated\";\n  }\n\n  updateCommandMetadata({ subtitle });\n}\n"],
  "mappings": "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",
  "names": ["addSchedule_exports", "__export", "Command", "__toCommonJS", "import_react", "import_api", "import_api", "import_react", "dayOrder", "useLoadStoredSchedules", "updateSchedules", "setIsLoading", "loadSchedulesFromLocalStorage", "allStoredItems", "schedules", "item", "a", "b", "import_api", "import_jsx_runtime", "ListActionPanel", "searchText", "schedule", "onSetScheduleAction", "onDeleteScheduleAction", "onPauseScheduleAction", "onResumeScheduleAction", "import_api", "import_node_child_process", "startCaffeinate", "updates", "hudMessage", "additionalArgs", "stopCaffeinate", "generateArgs", "update", "caffeinated", "tryLaunchCommand", "commandName", "context", "preferences", "args", "numberToDayString", "dayIndex", "getSchedule", "currentDayString", "changeScheduleState", "operation", "schedule", "isNotTodaysSchedule", "isTodaysSchedule", "import_api", "extractSchedule", "text", "daysOfWeek", "inputText", "timeRegex", "times", "fromTime", "toTime", "mentionedDays", "day", "import_api", "handleScheduledCaffeinate", "schedule", "currentDate", "startHour", "startMinute", "endHour", "endMinute", "currentHour", "currentMinute", "isWithinSchedule", "stopCaffeinate", "duration", "startCaffeinate", "checkSchedule", "getSchedule", "import_jsx_runtime", "Command", "searchText", "setSearchText", "isLoading", "setIsLoading", "schedules", "setSchedules", "useLoadStoredSchedules", "handleSetSchedule", "parsedSchedule", "extractSchedule", "days", "from", "to", "newSchedules", "day", "schedule", "currentDayString", "numberToDayString", "isScheduleRunning", "checkSchedule", "updatedSchedules", "prevSchedules", "error", "handleDeleteSchedule", "stopCaffeinate", "scheduleItem", "handlePauseSchedule", "changeScheduleState", "isTodaysSchedule", "s", "handleResumeSchedule", "isScheduled", "sectionTitle", "index", "isNotTodaysSchedule", "idx", "ListActionPanel"]
}
