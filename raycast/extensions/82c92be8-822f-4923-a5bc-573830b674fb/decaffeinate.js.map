{
  "version": 3,
  "sources": ["../src/decaffeinate.ts", "../src/utils.ts"],
  "sourcesContent": ["import { stopCaffeinate, getSchedule } from \"./utils\";\nimport { showToast, Toast } from \"@raycast/api\";\n\nexport default async () => {\n  const schedule = await getSchedule();\n  if (schedule != undefined && schedule.IsRunning == true)\n    await showToast(Toast.Style.Failure, \"Caffeination schedule running, pause to decaffeinate\");\n  else await stopCaffeinate({ menubar: true, status: true }, \"Your Mac is now decaffeinated\");\n};\n", "import { getPreferenceValues, launchCommand, LaunchType, LocalStorage, showHUD } from \"@raycast/api\";\nimport { exec, execSync } from \"node:child_process\";\n\ntype Preferences = {\n  preventDisplay: boolean;\n  preventDisk: boolean;\n  preventSystem: boolean;\n  icon: string;\n};\n\ntype Updates = {\n  menubar: boolean;\n  status: boolean;\n};\n\nexport interface Schedule {\n  day: string;\n  from: string;\n  to: string;\n  IsManuallyDecafed: boolean;\n  IsRunning: boolean;\n}\n\nexport async function startCaffeinate(updates: Updates, hudMessage?: string, additionalArgs?: string) {\n  if (hudMessage) {\n    await showHUD(hudMessage);\n  }\n  await stopCaffeinate({ menubar: false, status: false });\n  exec(`/usr/bin/caffeinate ${generateArgs(additionalArgs)} || true`);\n  await update(updates, true);\n}\n\nexport async function stopCaffeinate(updates: Updates, hudMessage?: string) {\n  if (hudMessage) {\n    await showHUD(hudMessage);\n  }\n  execSync(\"/usr/bin/killall caffeinate || true\");\n  await update(updates, false);\n}\n\nasync function update(updates: Updates, caffeinated: boolean) {\n  if (updates.menubar) {\n    await tryLaunchCommand(\"index\", { caffeinated });\n  }\n  if (updates.status) {\n    await tryLaunchCommand(\"status\", { caffeinated });\n  }\n}\n\nasync function tryLaunchCommand(commandName: string, context: { caffeinated: boolean }) {\n  try {\n    await launchCommand({ name: commandName, type: LaunchType.Background, context });\n  } catch (error) {\n    // Handle error if command is not enabled\n  }\n}\n\nfunction generateArgs(additionalArgs?: string) {\n  const preferences = getPreferenceValues<Preferences>();\n  const args = [];\n\n  if (preferences.preventDisplay) args.push(\"d\");\n  if (preferences.preventDisk) args.push(\"m\");\n  if (preferences.preventSystem) args.push(\"i\");\n  if (additionalArgs) args.push(` ${additionalArgs}`);\n\n  return args.length > 0 ? `-${args.join(\"\")}` : \"\";\n}\n\nexport function numberToDayString(dayIndex: number): string {\n  const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return daysOfWeek[dayIndex];\n}\n\nexport async function getSchedule() {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  const getSchedule: string | undefined = await LocalStorage.getItem(currentDayString);\n  if (getSchedule === undefined) return undefined;\n\n  const schedule: Schedule = JSON.parse(getSchedule);\n  return schedule;\n}\n\nexport async function changeScheduleState(operation: string, schedule: Schedule) {\n  switch (operation) {\n    case \"caffeinate\": {\n      schedule.IsManuallyDecafed = false;\n      schedule.IsRunning = false;\n      await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      break;\n    }\n    case \"decaffeinate\": {\n      if (schedule.IsRunning === true || isNotTodaysSchedule(schedule)) {\n        schedule.IsManuallyDecafed = true;\n        schedule.IsRunning = false;\n        await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      }\n      break;\n    }\n\n    default:\n      break;\n  }\n}\n\nexport function isTodaysSchedule(schedule: Schedule) {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  if (schedule.day === currentDayString) return true;\n  else return false;\n}\n\nexport function isNotTodaysSchedule(schedule: Schedule) {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  if (schedule.day === currentDayString) return false;\n  else return true;\n}\n\n/*\nExample usage:\nconsole.log(formatDuration(1337000)); // Output: \"15d 11h 23m 20s\"\nconsole.log(formatDuration(3600));    // Output: \"1h\"\nconsole.log(formatDuration(65));      // Output: \"1m 5s\"\nconsole.log(formatDuration(86400));   // Output: \"1d\"\n*/\nexport function formatDuration(seconds: number): string {\n  const units = [\n    { label: \"d\", value: 86400 },\n    { label: \"h\", value: 3600 },\n    { label: \"m\", value: 60 },\n    { label: \"s\", value: 1 },\n  ];\n\n  const result: string[] = [];\n\n  for (const unit of units) {\n    const amount = Math.floor(seconds / unit.value);\n    seconds %= unit.value;\n    if (amount > 0) {\n      result.push(`${amount}${unit.label}`);\n    }\n  }\n\n  return result.join(\" \");\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAsF,wBACtFC,EAA+B,8BA+B/B,eAAsBC,EAAeC,EAAkBC,EAAqB,CACtEA,GACF,QAAM,WAAQA,CAAU,KAE1B,YAAS,qCAAqC,EAC9C,MAAMC,EAAOF,EAAS,EAAK,CAC7B,CAEA,eAAeE,EAAOF,EAAkBG,EAAsB,CACxDH,EAAQ,SACV,MAAMI,EAAiB,QAAS,CAAE,YAAAD,CAAY,CAAC,EAE7CH,EAAQ,QACV,MAAMI,EAAiB,SAAU,CAAE,YAAAD,CAAY,CAAC,CAEpD,CAEA,eAAeC,EAAiBC,EAAqBC,EAAmC,CACtF,GAAI,CACF,QAAM,iBAAc,CAAE,KAAMD,EAAa,KAAM,aAAW,WAAY,QAAAC,CAAQ,CAAC,CACjF,MAAgB,CAEhB,CACF,CAcO,SAASC,EAAkBC,EAA0B,CAE1D,MADmB,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,UAAU,EAC9EA,CAAQ,CAC5B,CAEA,eAAsBC,GAAc,CAElC,IAAMC,EAAmBH,EADL,IAAI,KAAK,EAC0B,OAAO,CAAC,EAAE,YAAY,EAEvEE,EAAkC,MAAM,eAAa,QAAQC,CAAgB,EACnF,OAAID,IAAgB,OAAW,OAEJ,KAAK,MAAMA,CAAW,CAEnD,CDlFA,IAAAE,EAAiC,wBAE1BC,EAAQ,SAAY,CACzB,IAAMC,EAAW,MAAMC,EAAY,EAC/BD,GAAY,MAAaA,EAAS,WAAa,GACjD,QAAM,aAAU,QAAM,MAAM,QAAS,sDAAsD,EACxF,MAAME,EAAe,CAAE,QAAS,GAAM,OAAQ,EAAK,EAAG,+BAA+B,CAC5F",
  "names": ["decaffeinate_exports", "__export", "decaffeinate_default", "__toCommonJS", "import_api", "import_node_child_process", "stopCaffeinate", "updates", "hudMessage", "update", "caffeinated", "tryLaunchCommand", "commandName", "context", "numberToDayString", "dayIndex", "getSchedule", "currentDayString", "import_api", "decaffeinate_default", "schedule", "getSchedule", "stopCaffeinate"]
}
