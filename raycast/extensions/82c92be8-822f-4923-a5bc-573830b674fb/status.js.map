{
  "version": 3,
  "sources": ["../src/status.ts", "../src/utils.ts"],
  "sourcesContent": ["import { LocalStorage, updateCommandMetadata } from \"@raycast/api\";\nimport { Schedule, startCaffeinate, getSchedule, stopCaffeinate } from \"./utils\";\nimport { execSync } from \"node:child_process\";\n\nfunction isCaffeinateRunning(): boolean {\n  try {\n    execSync(\"pgrep caffeinate\");\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nasync function handleScheduledCaffeinate(schedule: Schedule): Promise<boolean> {\n  if (!schedule || Object.keys(schedule).length === 0) {\n    return false;\n  }\n\n  const currentDate = new Date();\n  const [startHour, startMinute] = schedule.from.split(\":\").map(Number);\n  const [endHour, endMinute] = schedule.to.split(\":\").map(Number);\n  const currentHour = currentDate.getHours();\n  const currentMinute = currentDate.getMinutes();\n\n  const isWithinSchedule =\n    (currentHour > startHour || (currentHour === startHour && currentMinute >= startMinute)) &&\n    (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute));\n\n  // Change isRunning to false when the schedule has finished its run\n  if (isWithinSchedule === false && schedule.IsRunning === true) {\n    schedule.IsRunning = false;\n    await stopCaffeinate({ menubar: true, status: true });\n    await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n    return false;\n  }\n\n  // If the current time is within scheduled time, start caffeination\n  if (isWithinSchedule === true && schedule.IsRunning === false) {\n    const duration = (endHour - startHour) * 3600 + (endMinute - startMinute) * 60;\n    await startCaffeinate({ menubar: true, status: true }, undefined, `-t ${duration}`);\n    schedule.IsRunning = true;\n    await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n    return true;\n  }\n\n  return false;\n}\n\n// Function to check and handle schedule\nexport async function checkSchedule() {\n  const schedule = await getSchedule();\n\n  if (schedule === undefined) return false;\n\n  if (!schedule.IsManuallyDecafed) {\n    const isScheduled = await handleScheduledCaffeinate(schedule);\n    return isScheduled;\n  }\n\n  return false;\n}\n\nexport default async function Command() {\n  const isCaffeinated = isCaffeinateRunning();\n  const isScheduled = await checkSchedule();\n\n  let subtitle = \"\u2716 Decaffeinated\";\n\n  if (isCaffeinated) {\n    subtitle = \"\u2714 Caffeinated\";\n  } else if (isScheduled) {\n    subtitle = \"\u2714 Caffeinated\";\n  }\n\n  updateCommandMetadata({ subtitle });\n}\n", "import { getPreferenceValues, launchCommand, LaunchType, LocalStorage, showHUD } from \"@raycast/api\";\nimport { exec, execSync } from \"node:child_process\";\n\ntype Preferences = {\n  preventDisplay: boolean;\n  preventDisk: boolean;\n  preventSystem: boolean;\n  icon: string;\n};\n\ntype Updates = {\n  menubar: boolean;\n  status: boolean;\n};\n\nexport interface Schedule {\n  day: string;\n  from: string;\n  to: string;\n  IsManuallyDecafed: boolean;\n  IsRunning: boolean;\n}\n\nexport async function startCaffeinate(updates: Updates, hudMessage?: string, additionalArgs?: string) {\n  if (hudMessage) {\n    await showHUD(hudMessage);\n  }\n  await stopCaffeinate({ menubar: false, status: false });\n  exec(`/usr/bin/caffeinate ${generateArgs(additionalArgs)} || true`);\n  await update(updates, true);\n}\n\nexport async function stopCaffeinate(updates: Updates, hudMessage?: string) {\n  if (hudMessage) {\n    await showHUD(hudMessage);\n  }\n  execSync(\"/usr/bin/killall caffeinate || true\");\n  await update(updates, false);\n}\n\nasync function update(updates: Updates, caffeinated: boolean) {\n  if (updates.menubar) {\n    await tryLaunchCommand(\"index\", { caffeinated });\n  }\n  if (updates.status) {\n    await tryLaunchCommand(\"status\", { caffeinated });\n  }\n}\n\nasync function tryLaunchCommand(commandName: string, context: { caffeinated: boolean }) {\n  try {\n    await launchCommand({ name: commandName, type: LaunchType.Background, context });\n  } catch (error) {\n    // Handle error if command is not enabled\n  }\n}\n\nfunction generateArgs(additionalArgs?: string) {\n  const preferences = getPreferenceValues<Preferences>();\n  const args = [];\n\n  if (preferences.preventDisplay) args.push(\"d\");\n  if (preferences.preventDisk) args.push(\"m\");\n  if (preferences.preventSystem) args.push(\"i\");\n  if (additionalArgs) args.push(` ${additionalArgs}`);\n\n  return args.length > 0 ? `-${args.join(\"\")}` : \"\";\n}\n\nexport function numberToDayString(dayIndex: number): string {\n  const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return daysOfWeek[dayIndex];\n}\n\nexport async function getSchedule() {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  const getSchedule: string | undefined = await LocalStorage.getItem(currentDayString);\n  if (getSchedule === undefined) return undefined;\n\n  const schedule: Schedule = JSON.parse(getSchedule);\n  return schedule;\n}\n\nexport async function changeScheduleState(operation: string, schedule: Schedule) {\n  switch (operation) {\n    case \"caffeinate\": {\n      schedule.IsManuallyDecafed = false;\n      schedule.IsRunning = false;\n      await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      break;\n    }\n    case \"decaffeinate\": {\n      if (schedule.IsRunning === true || isNotTodaysSchedule(schedule)) {\n        schedule.IsManuallyDecafed = true;\n        schedule.IsRunning = false;\n        await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      }\n      break;\n    }\n\n    default:\n      break;\n  }\n}\n\nexport function isTodaysSchedule(schedule: Schedule) {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  if (schedule.day === currentDayString) return true;\n  else return false;\n}\n\nexport function isNotTodaysSchedule(schedule: Schedule) {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  if (schedule.day === currentDayString) return false;\n  else return true;\n}\n\n/*\nExample usage:\nconsole.log(formatDuration(1337000)); // Output: \"15d 11h 23m 20s\"\nconsole.log(formatDuration(3600));    // Output: \"1h\"\nconsole.log(formatDuration(65));      // Output: \"1m 5s\"\nconsole.log(formatDuration(86400));   // Output: \"1d\"\n*/\nexport function formatDuration(seconds: number): string {\n  const units = [\n    { label: \"d\", value: 86400 },\n    { label: \"h\", value: 3600 },\n    { label: \"m\", value: 60 },\n    { label: \"s\", value: 1 },\n  ];\n\n  const result: string[] = [];\n\n  for (const unit of units) {\n    const amount = Math.floor(seconds / unit.value);\n    seconds %= unit.value;\n    if (amount > 0) {\n      result.push(`${amount}${unit.label}`);\n    }\n  }\n\n  return result.join(\" \");\n}\n"],
  "mappings": "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",
  "names": ["status_exports", "__export", "checkSchedule", "Command", "__toCommonJS", "import_api", "import_api", "import_node_child_process", "startCaffeinate", "updates", "hudMessage", "additionalArgs", "stopCaffeinate", "generateArgs", "update", "caffeinated", "tryLaunchCommand", "commandName", "context", "preferences", "args", "numberToDayString", "dayIndex", "getSchedule", "currentDayString", "import_node_child_process", "isCaffeinateRunning", "handleScheduledCaffeinate", "schedule", "currentDate", "startHour", "startMinute", "endHour", "endMinute", "currentHour", "currentMinute", "isWithinSchedule", "stopCaffeinate", "duration", "startCaffeinate", "checkSchedule", "getSchedule", "Command", "isCaffeinated", "isScheduled", "subtitle"]
}
