{
  "version": 3,
  "sources": ["../../src/tools/caffeinate-for.ts", "../../src/utils.ts"],
  "sourcesContent": ["import { startCaffeinate } from \"../utils\";\n\ntype Input = {\n  /**\n   * Number of hours (optional). Must be a non-negative integer.\n   */\n  hours?: number;\n  /**\n   * Number of minutes (optional). Must be a non-negative integer.\n   */\n  minutes?: number;\n  /**\n   * Number of seconds (optional). Must be a non-negative integer.\n   */\n  seconds?: number;\n};\n\n/**\n * Prevents your Mac from going to sleep for a specified duration\n */\nexport default async function (input: Input) {\n  const { hours = 0, minutes = 0, seconds = 0 } = input;\n\n  if (hours === 0 && minutes === 0 && seconds === 0) {\n    throw new Error(\"Please specify a duration\");\n  }\n\n  const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n  const formattedTime = `${hours ? `${hours}h` : \"\"}${minutes ? `${minutes}m` : \"\"}${seconds ? `${seconds}s` : \"\"}`;\n\n  await startCaffeinate({ menubar: true, status: true }, undefined, `-t ${totalSeconds}`);\n\n  return `Mac will stay awake for ${formattedTime}`;\n}\n", "import { getPreferenceValues, launchCommand, LaunchType, LocalStorage, showHUD } from \"@raycast/api\";\nimport { exec, execSync } from \"node:child_process\";\n\ntype Preferences = {\n  preventDisplay: boolean;\n  preventDisk: boolean;\n  preventSystem: boolean;\n  icon: string;\n};\n\ntype Updates = {\n  menubar: boolean;\n  status: boolean;\n};\n\nexport interface Schedule {\n  day: string;\n  from: string;\n  to: string;\n  IsManuallyDecafed: boolean;\n  IsRunning: boolean;\n}\n\nexport async function startCaffeinate(updates: Updates, hudMessage?: string, additionalArgs?: string) {\n  if (hudMessage) {\n    await showHUD(hudMessage);\n  }\n  await stopCaffeinate({ menubar: false, status: false });\n  exec(`/usr/bin/caffeinate ${generateArgs(additionalArgs)} || true`);\n  await update(updates, true);\n}\n\nexport async function stopCaffeinate(updates: Updates, hudMessage?: string) {\n  if (hudMessage) {\n    await showHUD(hudMessage);\n  }\n  execSync(\"/usr/bin/killall caffeinate || true\");\n  await update(updates, false);\n}\n\nasync function update(updates: Updates, caffeinated: boolean) {\n  if (updates.menubar) {\n    await tryLaunchCommand(\"index\", { caffeinated });\n  }\n  if (updates.status) {\n    await tryLaunchCommand(\"status\", { caffeinated });\n  }\n}\n\nasync function tryLaunchCommand(commandName: string, context: { caffeinated: boolean }) {\n  try {\n    await launchCommand({ name: commandName, type: LaunchType.Background, context });\n  } catch (error) {\n    // Handle error if command is not enabled\n  }\n}\n\nfunction generateArgs(additionalArgs?: string) {\n  const preferences = getPreferenceValues<Preferences>();\n  const args = [];\n\n  if (preferences.preventDisplay) args.push(\"d\");\n  if (preferences.preventDisk) args.push(\"m\");\n  if (preferences.preventSystem) args.push(\"i\");\n  if (additionalArgs) args.push(` ${additionalArgs}`);\n\n  return args.length > 0 ? `-${args.join(\"\")}` : \"\";\n}\n\nexport function numberToDayString(dayIndex: number): string {\n  const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return daysOfWeek[dayIndex];\n}\n\nexport async function getSchedule() {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  const getSchedule: string | undefined = await LocalStorage.getItem(currentDayString);\n  if (getSchedule === undefined) return undefined;\n\n  const schedule: Schedule = JSON.parse(getSchedule);\n  return schedule;\n}\n\nexport async function changeScheduleState(operation: string, schedule: Schedule) {\n  switch (operation) {\n    case \"caffeinate\": {\n      schedule.IsManuallyDecafed = false;\n      schedule.IsRunning = false;\n      await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      break;\n    }\n    case \"decaffeinate\": {\n      if (schedule.IsRunning === true || isNotTodaysSchedule(schedule)) {\n        schedule.IsManuallyDecafed = true;\n        schedule.IsRunning = false;\n        await LocalStorage.setItem(schedule.day, JSON.stringify(schedule));\n      }\n      break;\n    }\n\n    default:\n      break;\n  }\n}\n\nexport function isTodaysSchedule(schedule: Schedule) {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  if (schedule.day === currentDayString) return true;\n  else return false;\n}\n\nexport function isNotTodaysSchedule(schedule: Schedule) {\n  const currentDate = new Date();\n  const currentDayString = numberToDayString(currentDate.getDay()).toLowerCase();\n\n  if (schedule.day === currentDayString) return false;\n  else return true;\n}\n\n/*\nExample usage:\nconsole.log(formatDuration(1337000)); // Output: \"15d 11h 23m 20s\"\nconsole.log(formatDuration(3600));    // Output: \"1h\"\nconsole.log(formatDuration(65));      // Output: \"1m 5s\"\nconsole.log(formatDuration(86400));   // Output: \"1d\"\n*/\nexport function formatDuration(seconds: number): string {\n  const units = [\n    { label: \"d\", value: 86400 },\n    { label: \"h\", value: 3600 },\n    { label: \"m\", value: 60 },\n    { label: \"s\", value: 1 },\n  ];\n\n  const result: string[] = [];\n\n  for (const unit of units) {\n    const amount = Math.floor(seconds / unit.value);\n    seconds %= unit.value;\n    if (amount > 0) {\n      result.push(`${amount}${unit.label}`);\n    }\n  }\n\n  return result.join(\" \");\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAsF,wBACtFC,EAA+B,8BAsB/B,eAAsBC,EAAgBC,EAAkBC,EAAqBC,EAAyB,CAChGD,GACF,QAAM,WAAQA,CAAU,EAE1B,MAAME,EAAe,CAAE,QAAS,GAAO,OAAQ,EAAM,CAAC,KACtD,QAAK,uBAAuBC,EAAaF,CAAc,CAAC,UAAU,EAClE,MAAMG,EAAOL,EAAS,EAAI,CAC5B,CAEA,eAAsBG,EAAeH,EAAkBC,EAAqB,CACtEA,GACF,QAAM,WAAQA,CAAU,KAE1B,YAAS,qCAAqC,EAC9C,MAAMI,EAAOL,EAAS,EAAK,CAC7B,CAEA,eAAeK,EAAOL,EAAkBM,EAAsB,CACxDN,EAAQ,SACV,MAAMO,EAAiB,QAAS,CAAE,YAAAD,CAAY,CAAC,EAE7CN,EAAQ,QACV,MAAMO,EAAiB,SAAU,CAAE,YAAAD,CAAY,CAAC,CAEpD,CAEA,eAAeC,EAAiBC,EAAqBC,EAAmC,CACtF,GAAI,CACF,QAAM,iBAAc,CAAE,KAAMD,EAAa,KAAM,aAAW,WAAY,QAAAC,CAAQ,CAAC,CACjF,MAAgB,CAEhB,CACF,CAEA,SAASL,EAAaF,EAAyB,CAC7C,IAAMQ,KAAc,uBAAiC,EAC/CC,EAAO,CAAC,EAEd,OAAID,EAAY,gBAAgBC,EAAK,KAAK,GAAG,EACzCD,EAAY,aAAaC,EAAK,KAAK,GAAG,EACtCD,EAAY,eAAeC,EAAK,KAAK,GAAG,EACxCT,GAAgBS,EAAK,KAAK,IAAIT,CAAc,EAAE,EAE3CS,EAAK,OAAS,EAAI,IAAIA,EAAK,KAAK,EAAE,CAAC,GAAK,EACjD,CD/CA,eAAOC,EAAwBC,EAAc,CAC3C,GAAM,CAAE,MAAAC,EAAQ,EAAG,QAAAC,EAAU,EAAG,QAAAC,EAAU,CAAE,EAAIH,EAEhD,GAAIC,IAAU,GAAKC,IAAY,GAAKC,IAAY,EAC9C,MAAM,IAAI,MAAM,2BAA2B,EAG7C,IAAMC,EAAeH,EAAQ,KAAOC,EAAU,GAAKC,EAC7CE,EAAgB,GAAGJ,EAAQ,GAAGA,CAAK,IAAM,EAAE,GAAGC,EAAU,GAAGA,CAAO,IAAM,EAAE,GAAGC,EAAU,GAAGA,CAAO,IAAM,EAAE,GAE/G,aAAMG,EAAgB,CAAE,QAAS,GAAM,OAAQ,EAAK,EAAG,OAAW,MAAMF,CAAY,EAAE,EAE/E,2BAA2BC,CAAa,EACjD",
  "names": ["caffeinate_for_exports", "__export", "caffeinate_for_default", "__toCommonJS", "import_api", "import_node_child_process", "startCaffeinate", "updates", "hudMessage", "additionalArgs", "stopCaffeinate", "generateArgs", "update", "caffeinated", "tryLaunchCommand", "commandName", "context", "preferences", "args", "caffeinate_for_default", "input", "hours", "minutes", "seconds", "totalSeconds", "formattedTime", "startCaffeinate"]
}
